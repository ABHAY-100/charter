const fs = require("fs");
const path = require("path");
const csv = require("csv-parser");
const PDFDocument = require("pdfkit");
const SVGtoPDF = require("svg-to-pdfkit");

const certificateDir = path.join(__dirname, "certificate");
if (!fs.existsSync(certificateDir)) {
  fs.mkdirSync(certificateDir);
  console.log(`Created directory: ${certificateDir}`);
}

async function generateCertificate(name, type, event, outputPath) {
  // 1. Load the SVG template
  let svg = fs.readFileSync("template.svg", "utf8");

  // 2. Replace placeholders
  svg = svg
    .replace(/{c_type}/g, type)
    .replace(/{p_name}/g, name)
    .replace(/{e_name}/g, event);

  // 3. Create a PDF from the SVG
  const doc = new PDFDocument({
    size: [842, 595],
    margins: { top: 0, bottom: 0, left: 0, right: 0 }
  });
  
  const stream = fs.createWriteStream(outputPath);
  doc.pipe(stream);
  
  // Add SVG to PDF - fill the entire page
  SVGtoPDF(doc, svg, 0, 0, {
    preserveAspectRatio: "xMinYMin meet"
  });
  
  // Finalize the PDF
  doc.end();
  
  return new Promise((resolve, reject) => {
    stream.on('finish', () => {
      console.log(`Certificate generated: ${outputPath}`);
      resolve();
    });
    stream.on('error', reject);
  });
}

async function processCertificates() {
  const results = [];

  fs.createReadStream("data.csv")
    .pipe(csv())
    .on("data", (data) => results.push(data))
    .on("end", async () => {
      console.log(`Processing ${results.length} certificates...`);
      
      const eventStats = {};

      for (const row of results) {
        const name = row.P_Name?.trim();
        const event = row.E_Name?.trim();
        const type = row.C_Type?.trim();

        if (!name || !event) continue;
        
        const eventDirName = event.replace(/\s+/g, "_");
        const eventDir = path.join(certificateDir, eventDirName);
        
        if (!fs.existsSync(eventDir)) {
          fs.mkdirSync(eventDir);
          console.log(`Created directory: ${eventDir}`);
          eventStats[event] = 0;
        }

        const filename = `${name.replace(/\s+/g, "_")}.pdf`;
        const outputPath = path.join(eventDir, filename);

        await generateCertificate(name, type, event, outputPath);
        
        eventStats[event] = (eventStats[event] || 0) + 1;
      }

      console.log("\nCertificates generated by event:");
      Object.entries(eventStats).forEach(([event, count]) => {
        console.log(`${event}: ${count} certificates`);
      });
      
      console.log(
        `\nSuccessfully generated ${results.length} certificates in their respective event folders.`
      );
    });
}

processCertificates().catch(console.error);
